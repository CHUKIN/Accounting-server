// <auto-generated />
using Accounting_server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Accountingserver.Migrations
{
    [DbContext(typeof(AccountingContext))]
    partial class AccountingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Accounting_server.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Accounting_server.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ItemId");

                    b.Property<int>("ShopId");

                    b.HasKey("PriceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Accounting_server.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Descriprion");

                    b.Property<bool>("DiscountProgramm");

                    b.Property<int>("ShopId");

                    b.Property<int>("UserId");

                    b.HasKey("PurchaseId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Accounting_server.PurchaseItem", b =>
                {
                    b.Property<int>("PurchaseId");

                    b.Property<int>("ItemId");

                    b.Property<decimal>("Count");

                    b.Property<bool>("Discount");

                    b.Property<int>("PriceId");

                    b.HasKey("PurchaseId", "ItemId");

                    b.HasAlternateKey("ItemId", "PurchaseId");

                    b.HasIndex("PriceId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("Accounting_server.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Name");

                    b.HasKey("ShopId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Accounting_server.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Accounting_server.Price", b =>
                {
                    b.HasOne("Accounting_server.Item", "Item")
                        .WithMany("Prices")
                        .HasForeignKey("ItemId");

                    b.HasOne("Accounting_server.Shop", "Shop")
                        .WithMany("Prices")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("Accounting_server.Purchase", b =>
                {
                    b.HasOne("Accounting_server.Shop", "Shop")
                        .WithMany("Purchase")
                        .HasForeignKey("ShopId");

                    b.HasOne("Accounting_server.User", "User")
                        .WithMany("Purchase")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Accounting_server.PurchaseItem", b =>
                {
                    b.HasOne("Accounting_server.Item", "Item")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ItemId");

                    b.HasOne("Accounting_server.Price", "Price")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PriceId");

                    b.HasOne("Accounting_server.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId");
                });
#pragma warning restore 612, 618
        }
    }
}
